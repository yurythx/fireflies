"""
Comando para sincronizar configura√ß√µes de email do banco para o arquivo .env.
"""

from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from apps.config.services.email_config_service import DynamicEmailConfigService
import logging

User = get_user_model()
logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Sincroniza configura√ß√µes de email do banco de dados para o arquivo .env'

    def add_arguments(self, parser):
        parser.add_argument(
            '--force',
            action='store_true',
            help='For√ßa a sincroniza√ß√£o mesmo se houver conflitos',
        )
        parser.add_argument(
            '--user',
            type=str,
            help='Username do usu√°rio que est√° executando a sincroniza√ß√£o',
        )

    def handle(self, *args, **options):
        try:
            # Obter usu√°rio se especificado
            user = None
            if options['user']:
                try:
                    user = User.objects.get(username=options['user'])
                except User.DoesNotExist:
                    self.stdout.write(
                        self.style.WARNING(f'Usu√°rio "{options["user"]}" n√£o encontrado')
                    )

            # Inicializar servi√ßo
            email_service = DynamicEmailConfigService()
            
            # Obter configura√ß√£o atual
            current_config = email_service.get_active_config()
            
            if not current_config:
                self.stdout.write(
                    self.style.WARNING('Nenhuma configura√ß√£o de email ativa encontrada')
                )
                return

            self.stdout.write('üîÑ Sincronizando configura√ß√µes de email...')
            
            # Sincronizar configura√ß√£o
            success = email_service.sync_config_to_env()
            
            if success:
                self.stdout.write(
                    self.style.SUCCESS('‚úÖ Configura√ß√µes de email sincronizadas com sucesso!')
                )
                
                # Mostrar configura√ß√µes aplicadas
                self.stdout.write('\nüìß Configura√ß√µes aplicadas:')
                for key, value in current_config.items():
                    if key == 'EMAIL_HOST_PASSWORD':
                        self.stdout.write(f'  {key}: {"*" * len(str(value)) if value else "n√£o definida"}')
                    else:
                        self.stdout.write(f'  {key}: {value}')
                
                self.stdout.write(
                    '\nüí° Para aplicar completamente, reinicie o servidor Django.'
                )
                
            else:
                self.stdout.write(
                    self.style.ERROR('‚ùå Erro ao sincronizar configura√ß√µes de email')
                )

        except Exception as e:
            logger.error(f'Erro ao sincronizar configura√ß√µes de email: {e}', exc_info=True)
            self.stdout.write(
                self.style.ERROR(f'‚ùå Erro inesperado: {str(e)}')
            ) 