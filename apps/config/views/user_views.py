from django.shortcuts import render, redirect
from django.contrib import messages
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission, Group
from django.views import View
from django.core.paginator import Paginator
from django.db.models import Q
from apps.config.forms.user_forms import UserCreateForm, UserUpdateForm, UserSearchForm
from apps.config.services.user_management_service import UserManagementService
from apps.config.services.system_config_service import AuditLogService
from apps.config.repositories.user_repository import DjangoUserRepository
from apps.config.repositories.config_repository import DjangoAuditLogRepository
from apps.config.mixins import ConfigPermissionMixin, PermissionHelperMixin, SuperuserRequiredMixin
from apps.config.services.permission_management_service import PermissionManagementService
from apps.config.repositories.permission_repository import DjangoPermissionRepository

User = get_user_model()

class UserListView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """
    View para listar usu√°rios do sistema.
    Exibe filtros, busca e pagina√ß√£o.
    """
    template_name = 'config/users/list.html'

    def get(self, request):
        """
        Lista usu√°rios com filtros e busca.

        Args:
            request (HttpRequest): Requisi√ß√£o HTTP.

        Returns:
            HttpResponse: P√°gina de listagem de usu√°rios.
        """
        form = UserSearchForm(request.GET)
        users = User.objects.all()

        # Aplica filtros
        if form.is_valid():
            query = form.cleaned_data.get('query')
            is_active = form.cleaned_data.get('is_active')
            is_staff = form.cleaned_data.get('is_staff')
            is_superuser = form.cleaned_data.get('is_superuser')

            if query:
                users = users.filter(
                    Q(email__icontains=query) |
                    Q(username__icontains=query) |
                    Q(first_name__icontains=query) |
                    Q(last_name__icontains=query)
                )

            if is_active:
                users = users.filter(is_active=is_active == 'true')

            if is_staff:
                users = users.filter(is_staff=is_staff == 'true')

            if is_superuser:
                users = users.filter(is_superuser=is_superuser == 'true')

        # Pagina√ß√£o
        paginator = Paginator(users.order_by('-date_joined'), 25)
        page_number = request.GET.get('page')
        page_obj = paginator.get_page(page_number)

        context = {
            'form': form,
            'page_obj': page_obj,
            'users': page_obj.object_list,
        }

        return render(request, self.template_name, context)


class UserCreateView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """View para criar usu√°rios"""
    template_name = 'config/users/create.html'

    def get(self, request):
        """Exibe formul√°rio de cria√ß√£o"""
        form = UserCreateForm()
        return render(request, self.template_name, {'form': form})

    def post(self, request):
        """Processa cria√ß√£o do usu√°rio"""
        form = UserCreateForm(request.POST)

        if form.is_valid():
            try:
                # Prepara dados do usu√°rio
                user_data = {
                    'email': form.cleaned_data['email'],
                    'username': form.cleaned_data['username'],
                    'first_name': form.cleaned_data['first_name'],
                    'last_name': form.cleaned_data['last_name'],
                    'password': form.cleaned_data['password1'],
                    'is_active': form.cleaned_data['is_active'],
                    'is_staff': form.cleaned_data['is_staff'],
                    'is_superuser': form.cleaned_data['is_superuser'],
                }

                # Cria o usu√°rio usando o service
                audit_service = AuditLogService(DjangoAuditLogRepository())
                user_service = UserManagementService(DjangoUserRepository(), audit_service)

                user = user_service.create_user(user_data, request.user)

                # Atribui grupos
                groups = form.cleaned_data.get('groups', [])
                if groups:
                    user.groups.set(groups)

                name = user.get_full_name() or user.first_name or user.email
                messages.success(
                    request,
                    f'üéâ Usu√°rio {name} criado com sucesso! Email: {user.email}'
                )
                return redirect('config:user_list')

            except ValueError as e:
                error_msg = f'‚ùå Erro de valida√ß√£o: {str(e)}'
                messages.error(request, error_msg)
                form.add_error(None, str(e))
            except Exception as e:
                error_msg = f'üîß Erro interno: {str(e)}. Tente novamente em alguns instantes.'
                messages.error(request, error_msg)
                form.add_error(None, 'Erro interno. Tente novamente.')

        return render(request, self.template_name, {'form': form})



class UserUpdateView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """View para editar usu√°rios"""
    template_name = 'config/users/update.html'

    def get(self, request, slug):
        """Exibe formul√°rio de edi√ß√£o"""
        try:
            user = User.objects.get(slug=slug)
            form = UserUpdateForm(instance=user)
            return render(request, self.template_name, {'form': form, 'user_detail': user})
        except User.DoesNotExist:
            messages.error(request, 'Usu√°rio n√£o encontrado.')
            return redirect('config:user_list')

    def post(self, request, slug):
        """Processa edi√ß√£o do usu√°rio"""
        try:
            user = User.objects.get(slug=slug)
            form = UserUpdateForm(request.POST, instance=user)

            if form.is_valid():
                try:
                    # Atualiza dados b√°sicos
                    updated_user = form.save()

                    # Atualiza grupos
                    groups = form.cleaned_data.get('groups', [])
                    updated_user.groups.set(groups)

                    # Log da a√ß√£o
                    audit_service = AuditLogService(DjangoAuditLogRepository())
                    audit_service.log_user_action(
                        user=request.user,
                        action='UPDATE_USER',
                        target_user=updated_user,
                        description=f'Usu√°rio {updated_user.email} atualizado'
                    )

                    name = updated_user.get_full_name() or updated_user.first_name or updated_user.email
                    messages.success(
                        request,
                        f'‚úÖ Usu√°rio {name} atualizado com sucesso!'
                    )
                    return redirect('config:user_list')

                except Exception as e:
                    error_msg = f'üîß Erro ao atualizar usu√°rio: {str(e)}'
                    messages.error(request, error_msg)
                    form.add_error(None, f'Erro ao atualizar usu√°rio: {str(e)}')

            return render(request, self.template_name, {'form': form, 'user_detail': user})

        except User.DoesNotExist:
            messages.error(request, 'Usu√°rio n√£o encontrado.')
            return redirect('config:user_list')


class UserActivateView(SuperuserRequiredMixin, PermissionHelperMixin, View):
    """View para ativar usu√°rios inativos"""
    def post(self, request, slug):
        """Ativa um usu√°rio inativo"""
        try:
            user = User.objects.get(slug=slug)
            
            # N√£o permite ativar o pr√≥prio usu√°rio se estiver inativo
            if user == request.user and not user.is_active:
                messages.error(request, 'üõ°Ô∏è Voc√™ n√£o pode ativar sua pr√≥pria conta enquanto estiver inativo.')
                return redirect('config:user_list')

            if user.is_active:
                messages.warning(request, f'‚ÑπÔ∏è O usu√°rio {user.email} j√° est√° ativo.')
                return redirect('config:user_list')

            # Ativa o usu√°rio
            user.is_active = True
            user.save()

            # Log da a√ß√£o
            audit_service = AuditLogService(DjangoAuditLogRepository())
            audit_service.log_user_action(
                user=request.user,
                action='ACTIVATE_USER',
                target_user=user,
                description=f'Usu√°rio {user.email} ativado'
            )

            messages.success(request, f'‚úÖ Usu√°rio {user.email} ativado com sucesso!')
            
        except User.DoesNotExist:
            messages.error(request, '‚ùå Usu√°rio n√£o encontrado.')
        except Exception as e:
            messages.error(request, f'üîß Erro ao ativar usu√°rio: {str(e)}')
        
        return redirect('config:user_list')


class UserDeactivateView(SuperuserRequiredMixin, PermissionHelperMixin, View):
    """View para desativar usu√°rios ativos"""
    def post(self, request, slug):
        """Desativa um usu√°rio ativo"""
        try:
            user = User.objects.get(slug=slug)
            
            # N√£o permite desativar o pr√≥prio usu√°rio
            if user == request.user:
                messages.error(request, 'üõ°Ô∏è Para sua seguran√ßa, voc√™ n√£o pode desativar a pr√≥pria conta logada.')
                return redirect('config:user_list')

            # N√£o permite desativar superusu√°rios (exceto por outros superusu√°rios)
            if user.is_superuser and not request.user.is_superuser:
                messages.error(request, 'üö´ Superusu√°rios n√£o podem ser desativados por esta interface.')
                return redirect('config:user_list')

            if not user.is_active:
                messages.warning(request, f'‚ÑπÔ∏è O usu√°rio {user.email} j√° est√° inativo.')
                return redirect('config:user_list')

            # Desativa o usu√°rio
            user.is_active = False
            user.save()

            # Log da a√ß√£o
            audit_service = AuditLogService(DjangoAuditLogRepository())
            audit_service.log_user_action(
                user=request.user,
                action='DEACTIVATE_USER',
                target_user=user,
                description=f'Usu√°rio {user.email} desativado'
            )

            messages.success(request, f'‚è∏Ô∏è Usu√°rio {user.email} desativado com sucesso!')
            
        except User.DoesNotExist:
            messages.error(request, '‚ùå Usu√°rio n√£o encontrado.')
        except Exception as e:
            messages.error(request, f'üîß Erro ao desativar usu√°rio: {str(e)}')
        
        return redirect('config:user_list')


class UserDeleteView(SuperuserRequiredMixin, PermissionHelperMixin, View):
    """View para deletar usu√°rios - Apenas superusu√°rios"""
    template_name = 'config/users/delete.html'

    def get(self, request, slug):
        """Exibe confirma√ß√£o de exclus√£o"""
        try:
            user = User.objects.get(slug=slug)

            # N√£o permite deletar o pr√≥prio usu√°rio
            if user == request.user:
                messages.error(request, 'üõ°Ô∏è Para sua seguran√ßa, voc√™ n√£o pode excluir a pr√≥pria conta logada.')
                return redirect('config:user_list')

            # N√£o permite deletar superusu√°rios (exceto por outros superusu√°rios)
            if user.is_superuser and not request.user.is_superuser:
                messages.error(request, 'üö´ Superusu√°rios n√£o podem ser exclu√≠dos por esta interface.')
                return redirect('config:user_list')

            return render(request, self.template_name, {'user_detail': user})
        except User.DoesNotExist:
            messages.error(request, 'Usu√°rio n√£o encontrado.')
            return redirect('config:user_list')

    def post(self, request, slug):
        """Processa exclus√£o do usu√°rio"""
        try:
            user = User.objects.get(slug=slug)

            # Valida√ß√µes de seguran√ßa
            if user == request.user:
                messages.error(request, 'üõ°Ô∏è Para sua seguran√ßa, voc√™ n√£o pode excluir a pr√≥pria conta logada.')
                return redirect('config:user_list')

            if user.is_superuser and not request.user.is_superuser:
                messages.error(request, 'üö´ Superusu√°rios n√£o podem ser exclu√≠dos por esta interface.')
                return redirect('config:user_list')

            # Salva informa√ß√µes para o log antes de deletar
            user_email = user.email

            # Deleta o usu√°rio
            user.delete()

            # Log da a√ß√£o
            audit_service = AuditLogService(DjangoAuditLogRepository())
            audit_service.log_user_action(
                user=request.user,
                action='DELETE_USER',
                description=f'Usu√°rio {user_email} deletado',
                extra_data={'deleted_user_email': user_email}
            )

            messages.success(request, f'üóëÔ∏è O usu√°rio {user_email} foi removido com sucesso.')
            return redirect('config:user_list')

        except User.DoesNotExist:
            messages.error(request, '‚ùå Usu√°rio n√£o encontrado.')
            return redirect('config:user_list')
        except Exception as e:
            messages.error(request, f'üîß Erro ao deletar usu√°rio: {str(e)}')
            return redirect('config:user_list')


class UserPermissionAssignView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """Atribui permiss√£o a um usu√°rio (POST)"""
    def post(self, request, slug):
        if not request.user.is_staff:
            return self.handle_no_permission()
        user = User.objects.get(slug=slug)
        perm_id = request.POST.get('permission_id')
        if not perm_id:
            messages.error(request, 'Permiss√£o n√£o especificada.')
            return redirect('config:user_list')
        try:
            service = PermissionManagementService(
                DjangoUserRepository(),
                DjangoPermissionRepository(),
                AuditLogService(DjangoAuditLogRepository())
            )
            service.assign_permission_to_user(user.id, int(perm_id), request.user)
            messages.success(request, '‚úÖ Permiss√£o concedida com sucesso!')
        except Exception as e:
            messages.error(request, f'‚ùå Ocorreu um erro ao conceder permiss√£o: {e}')
        return redirect('config:user_list')


class UserPermissionRemoveView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """Remove permiss√£o de um usu√°rio (POST)"""
    def post(self, request, slug):
        if not request.user.is_staff:
            return self.handle_no_permission()
        user = User.objects.get(slug=slug)
        perm_id = request.POST.get('permission_id')
        if not perm_id:
            messages.error(request, 'Permiss√£o n√£o especificada.')
            return redirect('config:user_list')
        try:
            service = PermissionManagementService(
                DjangoUserRepository(),
                DjangoPermissionRepository(),
                AuditLogService(DjangoAuditLogRepository())
            )
            service.remove_permission_from_user(user.id, int(perm_id), request.user)
            messages.success(request, '‚úÖ Permiss√£o removida com sucesso!')
        except Exception as e:
            messages.error(request, f'‚ùå Ocorreu um erro ao remover permiss√£o: {e}')
        return redirect('config:user_list')


class UserGroupAssignView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """Atribui grupo a um usu√°rio (POST)"""
    def post(self, request, slug):
        if not request.user.is_staff:
            return self.handle_no_permission()
        user = User.objects.get(slug=slug)
        group_id = request.POST.get('group_id')
        if not group_id:
            messages.error(request, 'Grupo n√£o especificado.')
            return redirect('config:user_list')
        try:
            service = PermissionManagementService(
                DjangoUserRepository(),
                DjangoPermissionRepository(),
                AuditLogService(DjangoAuditLogRepository())
            )
            service.assign_group_to_user(user.id, int(group_id), request.user)
            messages.success(request, '‚úÖ Grupo atribu√≠do com sucesso!')
        except Exception as e:
            messages.error(request, f'‚ùå Ocorreu um erro ao atribuir grupo: {e}')
        return redirect('config:user_list')


class UserGroupRemoveView(ConfigPermissionMixin, PermissionHelperMixin, View):
    """Remove grupo de um usu√°rio (POST)"""
    def post(self, request, slug):
        if not request.user.is_staff:
            return self.handle_no_permission()
        user = User.objects.get(slug=slug)
        group_id = request.POST.get('group_id')
        if not group_id:
            messages.error(request, 'Grupo n√£o especificado.')
            return redirect('config:user_list')
        try:
            service = PermissionManagementService(
                DjangoUserRepository(),
                DjangoPermissionRepository(),
                AuditLogService(DjangoAuditLogRepository())
            )
            service.remove_group_from_user(user.id, int(group_id), request.user)
            messages.success(request, '‚úÖ Grupo removido com sucesso!')
        except Exception as e:
            messages.error(request, f'‚ùå Ocorreu um erro ao remover grupo: {e}')
        return redirect('config:user_list')
