services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-fireflies_prod}
      POSTGRES_USER: ${DB_USER:-fireflies_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fireflies_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fireflies_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fireflies_network

  # Aplicacao Django
  web:
    build: .
    restart: unless-stopped
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DB_NAME: ${DB_NAME:-fireflies_prod}
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - fireflies_network

  # Redis (cache) - Opcional
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - fireflies_network

  # Apache (proxy reverso) - substitui nginx
  apache:
    image: httpd:2.4
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./docker/apache/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
    depends_on:
      - web
    networks:
      - fireflies_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  fireflies_network:
    driver: bridge
