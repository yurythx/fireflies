#!/usr/bin/env python3
"""
Script para corrigir problema de migra√ß√£o em produ√ß√£o
Resolve o erro: column articles_article.image_caption does not exist

Uso:
    python fix_migration_production.py
"""

import os
import sys
import django
from django.core.management import execute_from_command_line
from django.db import connection

def setup_django():
    """Configura o Django"""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'core.settings')
    django.setup()

def check_migration_status():
    """Verifica o status das migra√ß√µes"""
    print("üîç Verificando status das migra√ß√µes...")
    
    try:
        # Verificar migra√ß√µes aplicadas
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT app, name FROM django_migrations 
                WHERE app = 'articles' 
                ORDER BY id
            """)
            applied_migrations = cursor.fetchall()
            
        print(f"‚úÖ Migra√ß√µes aplicadas do app 'articles':")
        for app, name in applied_migrations:
            print(f"   - {app}.{name}")
            
        # Verificar se a migra√ß√£o problem√°tica foi aplicada
        migration_0003_applied = any(name == '0003_article_image_caption' for _, name in applied_migrations)
        
        if migration_0003_applied:
            print("‚úÖ Migra√ß√£o 0003_article_image_caption j√° foi aplicada")
            return True
        else:
            print("‚ùå Migra√ß√£o 0003_article_image_caption N√ÉO foi aplicada")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar migra√ß√µes: {e}")
        return False

def check_column_exists():
    """Verifica se a coluna image_caption existe"""
    print("üîç Verificando se a coluna image_caption existe...")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'articles_article' 
                AND column_name = 'image_caption'
            """)
            result = cursor.fetchone()
            
        if result:
            print("‚úÖ Coluna 'image_caption' existe na tabela")
            return True
        else:
            print("‚ùå Coluna 'image_caption' N√ÉO existe na tabela")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar coluna: {e}")
        return False

def apply_migration():
    """Aplica a migra√ß√£o espec√≠fica"""
    print("üöÄ Aplicando migra√ß√£o 0003_article_image_caption...")
    
    try:
        # Executar a migra√ß√£o espec√≠fica
        execute_from_command_line(['manage.py', 'migrate', 'articles', '0003_article_image_caption'])
        print("‚úÖ Migra√ß√£o aplicada com sucesso!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao aplicar migra√ß√£o: {e}")
        return False

def create_column_manually():
    """Cria a coluna manualmente se a migra√ß√£o falhar"""
    print("üîß Criando coluna manualmente...")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                ALTER TABLE articles_article 
                ADD COLUMN image_caption VARCHAR(255) DEFAULT '' 
                NOT NULL
            """)
            
        print("‚úÖ Coluna criada manualmente!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar coluna manualmente: {e}")
        return False

def mark_migration_as_applied():
    """Marca a migra√ß√£o como aplicada no Django"""
    print("üìù Marcando migra√ß√£o como aplicada...")
    
    try:
        with connection.cursor() as cursor:
            cursor.execute("""
                INSERT INTO django_migrations (app, name, applied) 
                VALUES ('articles', '0003_article_image_caption', NOW())
                ON CONFLICT (app, name) DO NOTHING
            """)
            
        print("‚úÖ Migra√ß√£o marcada como aplicada!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao marcar migra√ß√£o: {e}")
        return False

def test_articles_view():
    """Testa se a view de artigos funciona"""
    print("üß™ Testando view de artigos...")
    
    try:
        from django.test import Client
        from django.urls import reverse
        
        client = Client()
        response = client.get('/artigos/')
        
        if response.status_code == 200:
            print("‚úÖ View de artigos funcionando corretamente!")
            return True
        else:
            print(f"‚ùå View de artigos retornou status {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar view: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("ü¶ü FireFlies - Corre√ß√£o de Migra√ß√£o em Produ√ß√£o")
    print("=" * 50)
    
    # Setup Django
    setup_django()
    
    # Verificar status atual
    migration_applied = check_migration_status()
    column_exists = check_column_exists()
    
    print("\nüìä Status Atual:")
    print(f"   Migra√ß√£o aplicada: {'‚úÖ' if migration_applied else '‚ùå'}")
    print(f"   Coluna existe: {'‚úÖ' if column_exists else '‚ùå'}")
    
    # Se tudo est√° OK, n√£o precisa fazer nada
    if migration_applied and column_exists:
        print("\nüéâ Tudo est√° funcionando corretamente!")
        return
    
    print("\nüîß Iniciando corre√ß√£o...")
    
    # Cen√°rio 1: Migra√ß√£o n√£o aplicada, coluna n√£o existe
    if not migration_applied and not column_exists:
        print("\nüìã Cen√°rio 1: Aplicar migra√ß√£o normalmente")
        if apply_migration():
            print("‚úÖ Problema resolvido!")
        else:
            print("‚ö†Ô∏è Migra√ß√£o falhou, tentando criar coluna manualmente...")
            if create_column_manually() and mark_migration_as_applied():
                print("‚úÖ Problema resolvido manualmente!")
            else:
                print("‚ùå Falha na corre√ß√£o manual")
                return
    
    # Cen√°rio 2: Migra√ß√£o n√£o aplicada, mas coluna existe
    elif not migration_applied and column_exists:
        print("\nüìã Cen√°rio 2: Coluna existe mas migra√ß√£o n√£o aplicada")
        if mark_migration_as_applied():
            print("‚úÖ Problema resolvido!")
        else:
            print("‚ùå Falha ao marcar migra√ß√£o como aplicada")
            return
    
    # Cen√°rio 3: Migra√ß√£o aplicada, mas coluna n√£o existe
    elif migration_applied and not column_exists:
        print("\nüìã Cen√°rio 3: Migra√ß√£o aplicada mas coluna n√£o existe")
        if create_column_manually():
            print("‚úÖ Problema resolvido!")
        else:
            print("‚ùå Falha ao criar coluna")
            return
    
    # Testar se tudo est√° funcionando
    print("\nüß™ Testando corre√ß√£o...")
    if test_articles_view():
        print("\nüéâ Corre√ß√£o conclu√≠da com sucesso!")
        print("‚úÖ A aplica√ß√£o deve estar funcionando normalmente agora.")
    else:
        print("\n‚ö†Ô∏è Corre√ß√£o aplicada, mas teste falhou.")
        print("üîç Verifique os logs para mais detalhes.")

if __name__ == "__main__":
    main() 