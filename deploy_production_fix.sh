#!/bin/bash

# FireFlies - Script de Deploy para Produ√ß√£o com Corre√ß√£o de Migra√ß√µes
# Resolve problemas de migra√ß√£o como o erro de coluna image_caption

set -e  # Para o script se houver erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes de log
log() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Verificar se estamos no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    error "Este script deve ser executado no diret√≥rio raiz do projeto FireFlies"
    exit 1
fi

# Verificar se o ambiente virtual est√° ativo
if [ -z "$VIRTUAL_ENV" ]; then
    warn "Ambiente virtual n√£o detectado. Tentando ativar..."
    if [ -d "env" ]; then
        source env/bin/activate
        log "Ambiente virtual ativado"
    else
        error "Ambiente virtual n√£o encontrado. Execute: python3 -m venv env"
        exit 1
    fi
fi

# Fun√ß√£o para verificar status das migra√ß√µes
check_migrations() {
    step "Verificando status das migra√ß√µes..."
    
    # Verificar migra√ß√µes pendentes
    python manage.py showmigrations --list | grep -E "\[ \]" || true
    
    # Verificar se h√° migra√ß√µes n√£o aplicadas
    PENDING_MIGRATIONS=$(python manage.py showmigrations --list | grep -c "\[ \]" || echo "0")
    
    if [ "$PENDING_MIGRATIONS" -gt 0 ]; then
        warn "Encontradas $PENDING_MIGRATIONS migra√ß√µes pendentes"
        return 1
    else
        log "Todas as migra√ß√µes est√£o aplicadas"
        return 0
    fi
}

# Fun√ß√£o para aplicar migra√ß√µes com seguran√ßa
apply_migrations() {
    step "Aplicando migra√ß√µes..."
    
    # Fazer backup antes das migra√ß√µes
    if [ -f "db.sqlite3" ]; then
        cp db.sqlite3 db.sqlite3.backup.$(date +%Y%m%d_%H%M%S)
        log "Backup do banco criado"
    fi
    
    # Aplicar migra√ß√µes
    python manage.py migrate --noinput
    
    log "Migra√ß√µes aplicadas com sucesso"
}

# Fun√ß√£o para verificar problemas espec√≠ficos
check_specific_issues() {
    step "Verificando problemas espec√≠ficos..."
    
    # Verificar se a coluna image_caption existe
    python manage.py shell -c "
from django.db import connection
with connection.cursor() as cursor:
    cursor.execute(\"\"\"
        SELECT column_name 
        FROM information_schema.columns 
        WHERE table_name = 'articles_article' 
        AND column_name = 'image_caption'
    \"\"\")
    result = cursor.fetchone()
    if result:
        print('‚úÖ Coluna image_caption existe')
    else:
        print('‚ùå Coluna image_caption N√ÉO existe')
        exit(1)
" || {
        error "Problema detectado: coluna image_caption n√£o existe"
        return 1
    }
    
    log "Verifica√ß√£o de problemas espec√≠ficos conclu√≠da"
    return 0
}

# Fun√ß√£o para corrigir problemas espec√≠ficos
fix_specific_issues() {
    step "Corrigindo problemas espec√≠ficos..."
    
    # Executar script de corre√ß√£o
    if [ -f "fix_migration_production.py" ]; then
        log "Executando script de corre√ß√£o..."
        python fix_migration_production.py
    else
        warn "Script de corre√ß√£o n√£o encontrado, tentando corre√ß√£o manual..."
        
        # Tentar aplicar migra√ß√£o espec√≠fica
        python manage.py migrate articles 0003_article_image_caption --fake-initial || {
            warn "Migra√ß√£o falhou, tentando criar coluna manualmente..."
            
            # Criar coluna manualmente
            python manage.py shell -c "
from django.db import connection
try:
    with connection.cursor() as cursor:
        cursor.execute('ALTER TABLE articles_article ADD COLUMN image_caption VARCHAR(255) DEFAULT \"\" NOT NULL')
    print('‚úÖ Coluna criada manualmente')
    
    # Marcar migra√ß√£o como aplicada
    with connection.cursor() as cursor:
        cursor.execute('\"\"\"INSERT INTO django_migrations (app, name, applied) VALUES (\"articles\", \"0003_article_image_caption\", NOW()) ON CONFLICT (app, name) DO NOTHING\"\"\"')
    print('‚úÖ Migra√ß√£o marcada como aplicada')
    
except Exception as e:
    print(f'‚ùå Erro: {e}')
    exit(1)
"
        }
    fi
    
    log "Corre√ß√£o de problemas espec√≠ficos conclu√≠da"
}

# Fun√ß√£o para coletar arquivos est√°ticos
collect_static() {
    step "Coletando arquivos est√°ticos..."
    python manage.py collectstatic --noinput
    log "Arquivos est√°ticos coletados"
}

# Fun√ß√£o para verificar sa√∫de da aplica√ß√£o
health_check() {
    step "Verificando sa√∫de da aplica√ß√£o..."
    
    # Testar se o Django est√° funcionando
    python manage.py check --deploy || {
        error "Problemas de configura√ß√£o detectados"
        return 1
    }
    
    # Testar conex√£o com banco
    python manage.py shell -c "
from django.db import connection
try:
    with connection.cursor() as cursor:
        cursor.execute('SELECT 1')
    print('‚úÖ Conex√£o com banco OK')
except Exception as e:
    print(f'‚ùå Erro na conex√£o com banco: {e}')
    exit(1)
" || {
        error "Problema na conex√£o com banco de dados"
        return 1
    }
    
    log "Verifica√ß√£o de sa√∫de conclu√≠da"
    return 0
}

# Fun√ß√£o para reiniciar servi√ßos
restart_services() {
    step "Reiniciando servi√ßos..."
    
    # Se estiver usando systemd
    if command -v systemctl >/dev/null 2>&1; then
        if systemctl is-active --quiet fireflies; then
            log "Reiniciando servi√ßo fireflies..."
            sudo systemctl restart fireflies
        fi
    fi
    
    # Se estiver usando Docker
    if [ -f "docker-compose.yml" ] || [ -f "docker-compose.prod.yml" ]; then
        log "Reiniciando containers Docker..."
        docker-compose -f docker-compose.prod.yml restart web || docker-compose restart web || true
    fi
    
    log "Servi√ßos reiniciados"
}

# Fun√ß√£o principal
main() {
    echo "ü¶ü FireFlies - Deploy de Produ√ß√£o com Corre√ß√£o de Migra√ß√µes"
    echo "=========================================================="
    
    # Verificar pr√©-requisitos
    step "Verificando pr√©-requisitos..."
    
    # Verificar Python
    if ! command -v python3 >/dev/null 2>&1; then
        error "Python3 n√£o encontrado"
        exit 1
    fi
    
    # Verificar Django
    if ! python -c "import django" 2>/dev/null; then
        error "Django n√£o encontrado. Instale as depend√™ncias: pip install -r requirements.txt"
        exit 1
    fi
    
    log "Pr√©-requisitos verificados"
    
    # Verificar sa√∫de inicial
    health_check || {
        error "Problemas de sa√∫de detectados antes do deploy"
        exit 1
    }
    
    # Verificar migra√ß√µes
    if ! check_migrations; then
        warn "Migra√ß√µes pendentes detectadas"
        
        # Perguntar se deve continuar
        read -p "Deseja aplicar as migra√ß√µes? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            apply_migrations
        else
            error "Deploy cancelado pelo usu√°rio"
            exit 1
        fi
    fi
    
    # Verificar problemas espec√≠ficos
    if ! check_specific_issues; then
        warn "Problemas espec√≠ficos detectados"
        fix_specific_issues
    fi
    
    # Coletar arquivos est√°ticos
    collect_static
    
    # Verificar sa√∫de final
    health_check || {
        error "Problemas de sa√∫de detectados ap√≥s deploy"
        exit 1
    }
    
    # Reiniciar servi√ßos
    restart_services
    
    echo ""
    echo "üéâ Deploy conclu√≠do com sucesso!"
    echo "‚úÖ A aplica√ß√£o deve estar funcionando normalmente"
    echo ""
    echo "üìä Para verificar o status:"
    echo "   - Logs: tail -f /var/log/fireflies.log"
    echo "   - Status: systemctl status fireflies"
    echo "   - Health: curl http://localhost:8000/health/"
    echo ""
}

# Executar fun√ß√£o principal
main "$@" 