#!/bin/bash

# ðŸ”§ Script de ConfiguraÃ§Ã£o PÃ³s-Deploy - FireFlies CMS
# Assumindo que a VM jÃ¡ estÃ¡ criada e SSH estabelecido

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# FunÃ§Ã£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERRO] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[AVISO] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# Verificar se estamos conectados via SSH
if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ]; then
    error "Este script deve ser executado via SSH na VM"
fi

# VariÃ¡veis de configuraÃ§Ã£o
DOMAIN=""
EMAIL_HOST_USER=""
EMAIL_HOST_PASSWORD=""
ADMIN_USERNAME=""
ADMIN_EMAIL=""
ADMIN_PASSWORD=""

# FunÃ§Ã£o para obter configuraÃ§Ãµes
get_config() {
    echo "=== ConfiguraÃ§Ã£o PÃ³s-Deploy ==="
    
    read -p "DomÃ­nio configurado: " DOMAIN
    read -p "Email para notificaÃ§Ãµes: " EMAIL_HOST_USER
    read -p "Senha do email (App Password): " EMAIL_HOST_PASSWORD
    read -p "Nome do usuÃ¡rio admin: " ADMIN_USERNAME
    read -p "Email do admin: " ADMIN_EMAIL
    read -p "Senha do admin: " ADMIN_PASSWORD
    
    echo "ConfiguraÃ§Ã£o obtida!"
}

# FunÃ§Ã£o para configurar monitoramento avanÃ§ado
setup_advanced_monitoring() {
    log "Configurando monitoramento avanÃ§ado..."
    
    # Instalar ferramentas adicionais
    sudo apt install -y sysstat iotop htop nethogs
    
    # Configurar sysstat
    sudo sed -i 's/ENABLED="false"/ENABLED="true"/' /etc/default/sysstat
    sudo systemctl enable sysstat
    sudo systemctl start sysstat
    
    # Criar script de monitoramento avanÃ§ado
    sudo tee /home/deploy/advanced_monitor.sh > /dev/null << 'MONITOREOF'
#!/bin/bash
echo "=== FireFlies Advanced Monitor ==="
echo "Data: $(date)"
echo "Uptime: $(uptime)"
echo ""

echo "=== CPU ==="
echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)%"
echo "Load Average: $(uptime | awk -F'load average:' '{print $2}')"
echo ""

echo "=== Memory ==="
free -h
echo ""

echo "=== Disk ==="
df -h
echo ""

echo "=== Network ==="
ss -tuln | grep -E ':(80|443|22|5432|6379)'
echo ""

echo "=== Services ==="
echo "FireFlies: $(systemctl is-active fireflies)"
echo "Nginx: $(systemctl is-active nginx)"
echo "PostgreSQL: $(systemctl is-active postgresql)"
echo "Redis: $(systemctl is-active redis-server)"
echo ""

echo "=== Process Info ==="
ps aux | grep -E '(fireflies|gunicorn|nginx|postgres|redis)' | grep -v grep
echo ""

echo "=== Recent Logs ==="
tail -5 /var/log/fireflies/django.log 2>/dev/null || echo "No Django logs found"
echo ""
MONITOREOF
    
    sudo chmod +x /home/deploy/advanced_monitor.sh
    
    # Configurar crontab para monitoramento avanÃ§ado
    sudo su - deploy -c "(crontab -l 2>/dev/null; echo '*/10 * * * * /home/deploy/advanced_monitor.sh >> /home/deploy/advanced_monitor.log 2>&1') | crontab -"
}

# FunÃ§Ã£o para configurar backup avanÃ§ado
setup_advanced_backup() {
    log "Configurando backup avanÃ§ado..."
    
    # Criar script de backup avanÃ§ado
    sudo tee /home/deploy/advanced_backup.sh > /dev/null << 'BACKUPEOF'
#!/bin/bash
BACKUP_DIR="/home/deploy/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="fireflies_backup_$DATE"

mkdir -p $BACKUP_DIR

echo "Iniciando backup avanÃ§ado: $BACKUP_NAME"

# Backup do banco de dados
echo "Backup do banco de dados..."
pg_dump fireflies > $BACKUP_DIR/${BACKUP_NAME}.sql

# Backup dos arquivos de mÃ­dia
echo "Backup dos arquivos de mÃ­dia..."
tar -czf $BACKUP_DIR/${BACKUP_NAME}_media.tar.gz -C /home/deploy/fireflies media/

# Backup das configuraÃ§Ãµes
echo "Backup das configuraÃ§Ãµes..."
tar -czf $BACKUP_DIR/${BACKUP_NAME}_config.tar.gz -C /home/deploy/fireflies .env

# Backup dos logs
echo "Backup dos logs..."
tar -czf $BACKUP_DIR/${BACKUP_NAME}_logs.tar.gz -C /var/log fireflies/

# Backup das configuraÃ§Ãµes do sistema
echo "Backup das configuraÃ§Ãµes do sistema..."
tar -czf $BACKUP_DIR/${BACKUP_NAME}_system.tar.gz -C /etc nginx/ postgresql/ redis/

# Criar arquivo de metadados
cat > $BACKUP_DIR/${BACKUP_NAME}_metadata.txt << EOF
Backup realizado em: $(date)
VersÃ£o do sistema: $(lsb_release -d | cut -f2)
VersÃ£o do PostgreSQL: $(psql --version)
VersÃ£o do Redis: $(redis-server --version)
Tamanho do backup: $(du -sh $BACKUP_DIR/${BACKUP_NAME}* | awk '{sum+=$1} END {print sum}')
EOF

# Manter apenas os Ãºltimos 7 backups
find $BACKUP_DIR -name "fireflies_backup_*" -mtime +7 -delete

echo "Backup avanÃ§ado concluÃ­do: $BACKUP_NAME"
BACKUPEOF
    
    sudo chmod +x /home/deploy/advanced_backup.sh
    
    # Configurar backup automÃ¡tico avanÃ§ado
    sudo su - deploy -c "(crontab -l 2>/dev/null; echo '0 2 * * * /home/deploy/advanced_backup.sh >> /home/deploy/advanced_backup.log 2>&1') | crontab -"
}

# FunÃ§Ã£o para configurar SSL avanÃ§ado
setup_advanced_ssl() {
    log "Configurando SSL avanÃ§ado..."
    
    if [ -z "$DOMAIN" ]; then
        warning "DomÃ­nio nÃ£o especificado. Pulando configuraÃ§Ã£o SSL avanÃ§ada."
        return 0
    fi
    
    # Configurar SSL com configuraÃ§Ãµes de seguranÃ§a
    sudo tee /etc/nginx/snippets/ssl-params.conf > /dev/null << 'SSLEOF'
ssl_protocols TLSv1.2 TLSv1.3;
ssl_prefer_server_ciphers on;
ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
ssl_ecdh_curve secp384r1;
ssl_session_timeout 10m;
ssl_session_cache shared:SSL:10m;
ssl_session_tickets off;
ssl_stapling on;
ssl_stapling_verify on;
resolver 8.8.8.8 8.8.4.4 valid=300s;
resolver_timeout 5s;
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
add_header X-Frame-Options DENY;
add_header X-Content-Type-Options nosniff;
add_header X-XSS-Protection "1; mode=block";
SSLEOF
    
    # Atualizar configuraÃ§Ã£o do Nginx
    sudo sed -i '/server_name/a \    include snippets/ssl-params.conf;' /etc/nginx/sites-available/fireflies
    
    # Testar e reiniciar Nginx
    sudo nginx -t
    sudo systemctl reload nginx
}

# FunÃ§Ã£o para configurar email
setup_email() {
    log "Configurando email..."
    
    if [ -z "$EMAIL_HOST_USER" ] || [ -z "$EMAIL_HOST_PASSWORD" ]; then
        warning "Credenciais de email nÃ£o fornecidas. Pulando configuraÃ§Ã£o de email."
        return 0
    fi
    
    # Atualizar configuraÃ§Ãµes de email no .env
    sudo su - deploy << EOF
    cd fireflies
    sed -i 's/EMAIL_HOST_USER=.*/EMAIL_HOST_USER=$EMAIL_HOST_USER/' .env
    sed -i 's/EMAIL_HOST_PASSWORD=.*/EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD/' .env
EOF
    
    # Testar configuraÃ§Ã£o de email
    sudo su - deploy << 'EOF'
    cd fireflies
    source venv/bin/activate
    export DJANGO_SETTINGS_MODULE=core.settings_production
    python manage.py shell -c "
from django.core.mail import send_mail
from django.conf import settings
try:
    send_mail(
        'Teste de Email - FireFlies',
        'Este Ã© um teste de configuraÃ§Ã£o de email.',
        settings.EMAIL_HOST_USER,
        ['$EMAIL_HOST_USER'],
        fail_silently=False,
    )
    print('Email de teste enviado com sucesso!')
except Exception as e:
    print(f'Erro ao enviar email: {e}')
"
EOF
}

# FunÃ§Ã£o para configurar domÃ­nio
setup_domain() {
    log "Configurando domÃ­nio..."
    
    if [ -z "$DOMAIN" ]; then
        warning "DomÃ­nio nÃ£o especificado. Pulando configuraÃ§Ã£o de domÃ­nio."
        return 0
    fi
    
    # Atualizar configuraÃ§Ãµes de domÃ­nio no .env
    sudo su - deploy << EOF
    cd fireflies
    sed -i 's/ALLOWED_HOSTS=.*/ALLOWED_HOSTS=$DOMAIN,www.$DOMAIN/' .env
    sed -i 's/CSRF_TRUSTED_ORIGINS=.*/CSRF_TRUSTED_ORIGINS=https:\/\/$DOMAIN,https:\/\/www.$DOMAIN/' .env
EOF
    
    # Atualizar configuraÃ§Ã£o do Nginx
    sudo sed -i "s/server_name .*/server_name $DOMAIN www.$DOMAIN;/" /etc/nginx/sites-available/fireflies
    
    # Testar e reiniciar Nginx
    sudo nginx -t
    sudo systemctl reload nginx
}

# FunÃ§Ã£o para configurar seguranÃ§a
setup_security() {
    log "Configurando seguranÃ§a..."
    
    # Configurar fail2ban
    sudo apt install -y fail2ban
    
    # Configurar fail2ban para SSH
    sudo tee /etc/fail2ban/jail.local > /dev/null << 'FAIL2BANEOF'
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3

[sshd]
enabled = true
port = ssh
filter = sshd
logpath = /var/log/auth.log
maxretry = 3

[nginx-http-auth]
enabled = true
filter = nginx-http-auth
port = http,https
logpath = /var/log/nginx/error.log
maxretry = 3
FAIL2BANEOF
    
    sudo systemctl enable fail2ban
    sudo systemctl start fail2ban
    
    # Configurar firewall adicional
    sudo ufw default deny incoming
    sudo ufw default allow outgoing
    sudo ufw allow ssh
    sudo ufw allow 'Nginx Full'
    sudo ufw --force enable
    
    # Configurar atualizaÃ§Ãµes automÃ¡ticas
    sudo apt install -y unattended-upgrades
    sudo dpkg-reconfigure -plow unattended-upgrades
    
    # Configurar auditoria
    sudo apt install -y auditd
    sudo systemctl enable auditd
    sudo systemctl start auditd
}

# FunÃ§Ã£o para configurar superusuÃ¡rio
setup_superuser() {
    log "Configurando superusuÃ¡rio..."
    
    if [ -z "$ADMIN_USERNAME" ] || [ -z "$ADMIN_EMAIL" ] || [ -z "$ADMIN_PASSWORD" ]; then
        warning "Credenciais do admin nÃ£o fornecidas. Pulando criaÃ§Ã£o do superusuÃ¡rio."
        return 0
    fi
    
    # Criar superusuÃ¡rio
    sudo su - deploy << EOF
    cd fireflies
    source venv/bin/activate
    export DJANGO_SETTINGS_MODULE=core.settings_production
    python manage.py shell -c "
from django.contrib.auth import get_user_model
User = get_user_model()
if not User.objects.filter(username='$ADMIN_USERNAME').exists():
    User.objects.create_superuser('$ADMIN_USERNAME', '$ADMIN_EMAIL', '$ADMIN_PASSWORD')
    print('SuperusuÃ¡rio criado com sucesso!')
else:
    print('SuperusuÃ¡rio jÃ¡ existe!')
"
EOF
}

# FunÃ§Ã£o para configurar logs estruturados
setup_structured_logs() {
    log "Configurando logs estruturados..."
    
    # Instalar logrotate
    sudo tee /etc/logrotate.d/fireflies > /dev/null << 'LOGROTATEEOF'
/home/deploy/fireflies/logs/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 deploy deploy
    postrotate
        systemctl reload fireflies
    endscript
}

/var/log/fireflies/*.log {
    daily
    missingok
    rotate 52
    compress
    delaycompress
    notifempty
    create 644 deploy deploy
    postrotate
        systemctl reload fireflies
    endscript
}
LOGROTATEEOF
    
    # Criar diretÃ³rio de logs estruturados
    sudo mkdir -p /var/log/fireflies/structured
    sudo chown deploy:deploy /var/log/fireflies/structured
    
    # Configurar logrotate
    sudo logrotate -f /etc/logrotate.d/fireflies
}

# FunÃ§Ã£o para configurar performance
setup_performance() {
    log "Configurando otimizaÃ§Ãµes de performance..."
    
    # Configurar PostgreSQL para performance
    sudo tee -a /etc/postgresql/*/main/postgresql.conf > /dev/null << 'POSTGRESQLEOF'

# ConfiguraÃ§Ãµes de performance
shared_buffers = 256MB
effective_cache_size = 1GB
work_mem = 4MB
maintenance_work_mem = 64MB
checkpoint_completion_target = 0.9
wal_buffers = 16MB
default_statistics_target = 100
random_page_cost = 1.1
effective_io_concurrency = 200
POSTGRESQLEOF
    
    # Configurar Redis para performance
    sudo sed -i 's/# maxmemory <bytes>/maxmemory 256mb/' /etc/redis/redis.conf
    sudo sed -i 's/# maxmemory-policy noeviction/maxmemory-policy allkeys-lru/' /etc/redis/redis.conf
    
    # Configurar Nginx para performance
    sudo tee /etc/nginx/conf.d/performance.conf > /dev/null << 'NGINXEOF'
# ConfiguraÃ§Ãµes de performance
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 65535;
    use epoll;
    multi_accept on;
}

http {
    # ConfiguraÃ§Ãµes de buffer
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # ConfiguraÃ§Ãµes de timeout
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;
    
    # ConfiguraÃ§Ãµes de gzip
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
}
NGINXEOF
    
    # Reiniciar serviÃ§os
    sudo systemctl restart postgresql
    sudo systemctl restart redis-server
    sudo systemctl restart nginx
    sudo systemctl restart fireflies
}

# FunÃ§Ã£o para configurar backup para nuvem
setup_cloud_backup() {
    log "Configurando backup para nuvem..."
    
    # Instalar rclone para backup na nuvem
    curl https://rclone.org/install.sh | sudo bash
    
    # Criar script de backup na nuvem
    sudo tee /home/deploy/cloud_backup.sh > /dev/null << 'CLOUDBACKUPEOF'
#!/bin/bash
BACKUP_DIR="/home/deploy/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="fireflies_backup_$DATE"

# Fazer backup local primeiro
/home/deploy/advanced_backup.sh

# Configurar rclone (se necessÃ¡rio)
# rclone config

# Fazer upload para nuvem (exemplo com Google Drive)
# rclone copy $BACKUP_DIR fireflies-backups:fireflies/

echo "Backup na nuvem configurado!"
CLOUDBACKUPEOF
    
    sudo chmod +x /home/deploy/cloud_backup.sh
    
    info "Para configurar backup na nuvem, execute: rclone config"
}

# FunÃ§Ã£o para configurar notificaÃ§Ãµes
setup_notifications() {
    log "Configurando notificaÃ§Ãµes..."
    
    # Criar script de notificaÃ§Ãµes
    sudo tee /home/deploy/notifications.sh > /dev/null << 'NOTIFICATIONSEOF'
#!/bin/bash

# FunÃ§Ã£o para enviar notificaÃ§Ã£o
send_notification() {
    local message="$1"
    local subject="$2"
    
    # Enviar email (se configurado)
    if [ ! -z "$EMAIL_HOST_USER" ]; then
        echo "$message" | mail -s "$subject" $EMAIL_HOST_USER
    fi
    
    # Log da notificaÃ§Ã£o
    echo "$(date): $subject - $message" >> /home/deploy/notifications.log
}

# Verificar serviÃ§os
check_services() {
    local services=("fireflies" "nginx" "postgresql" "redis-server")
    
    for service in "${services[@]}"; do
        if ! systemctl is-active --quiet $service; then
            send_notification "ServiÃ§o $service estÃ¡ inativo!" "Alerta: ServiÃ§o Inativo"
        fi
    done
}

# Verificar disco
check_disk() {
    local usage=$(df / | awk 'NR==2{print $5}' | sed 's/%//')
    
    if [ $usage -gt 80 ]; then
        send_notification "Uso de disco estÃ¡ em ${usage}%!" "Alerta: Disco Cheio"
    fi
}

# Verificar memÃ³ria
check_memory() {
    local usage=$(free | awk 'NR==2{printf "%.0f", $3*100/$2}')
    
    if [ $usage -gt 80 ]; then
        send_notification "Uso de memÃ³ria estÃ¡ em ${usage}%!" "Alerta: MemÃ³ria Alta"
    fi
}

# Executar verificaÃ§Ãµes
check_services
check_disk
check_memory
NOTIFICATIONSEOF
    
    sudo chmod +x /home/deploy/notifications.sh
    
    # Configurar crontab para notificaÃ§Ãµes
    sudo su - deploy -c "(crontab -l 2>/dev/null; echo '*/15 * * * * /home/deploy/notifications.sh') | crontab -"
}

# FunÃ§Ã£o para verificar status final
check_final_status() {
    log "Verificando status final..."
    
    echo "=== Status dos ServiÃ§os ==="
    sudo systemctl status fireflies --no-pager -l
    echo ""
    sudo systemctl status nginx --no-pager -l
    echo ""
    sudo systemctl status postgresql --no-pager -l
    echo ""
    sudo systemctl status redis-server --no-pager -l
    echo ""
    sudo systemctl status fail2ban --no-pager -l
    echo ""
    
    echo "=== Teste de ConexÃ£o ==="
    curl -I http://localhost/health/ || echo "Health check falhou"
    echo ""
    
    echo "=== InformaÃ§Ãµes de SeguranÃ§a ==="
    sudo ufw status
    echo ""
    sudo fail2ban-client status
    echo ""
    
    echo "=== InformaÃ§Ãµes do Sistema ==="
    echo "DomÃ­nio: $DOMAIN"
    echo "Email: $EMAIL_HOST_USER"
    echo "Admin: $ADMIN_USERNAME"
    echo "Uptime: $(uptime)"
    echo "Disco: $(df -h /)"
    echo "MemÃ³ria: $(free -h)"
}

# FunÃ§Ã£o principal
main() {
    echo "ðŸ”§ Script de ConfiguraÃ§Ã£o PÃ³s-Deploy - FireFlies CMS"
    echo "Assumindo que a VM jÃ¡ estÃ¡ criada e SSH estabelecido"
    echo ""
    
    # Obter configuraÃ§Ãµes
    get_config
    
    # Executar etapas
    setup_advanced_monitoring
    setup_advanced_backup
    setup_advanced_ssl
    setup_email
    setup_domain
    setup_security
    setup_superuser
    setup_structured_logs
    setup_performance
    setup_cloud_backup
    setup_notifications
    
    # Verificar status final
    check_final_status
    
    log "ConfiguraÃ§Ã£o pÃ³s-deploy concluÃ­da com sucesso!"
    echo ""
    echo "ðŸŽ‰ FireFlies CMS estÃ¡ totalmente configurado!"
    echo ""
    echo "ðŸ“‹ ConfiguraÃ§Ãµes aplicadas:"
    echo "âœ… Monitoramento avanÃ§ado"
    echo "âœ… Backup avanÃ§ado"
    echo "âœ… SSL avanÃ§ado"
    echo "âœ… ConfiguraÃ§Ã£o de email"
    echo "âœ… ConfiguraÃ§Ã£o de domÃ­nio"
    echo "âœ… SeguranÃ§a (fail2ban, firewall)"
    echo "âœ… SuperusuÃ¡rio criado"
    echo "âœ… Logs estruturados"
    echo "âœ… OtimizaÃ§Ãµes de performance"
    echo "âœ… Backup na nuvem (configurar manualmente)"
    echo "âœ… NotificaÃ§Ãµes automÃ¡ticas"
    echo ""
    echo "ðŸ“š Scripts disponÃ­veis:"
    echo "- /home/deploy/advanced_monitor.sh (monitoramento avanÃ§ado)"
    echo "- /home/deploy/advanced_backup.sh (backup avanÃ§ado)"
    echo "- /home/deploy/cloud_backup.sh (backup na nuvem)"
    echo "- /home/deploy/notifications.sh (notificaÃ§Ãµes)"
    echo ""
    echo "ðŸ”— URLs:"
    if [ ! -z "$DOMAIN" ]; then
        echo "- https://$DOMAIN"
        echo "- https://www.$DOMAIN"
    fi
    echo "- http://localhost"
    echo ""
    echo "ðŸ”‘ Credenciais:"
    echo "- Admin: $ADMIN_USERNAME"
    echo "- Email: $ADMIN_EMAIL"
    echo ""
    echo "ðŸ“ž Suporte:"
    echo "- Logs: tail -f /var/log/fireflies/django.log"
    echo "- Monitoramento: /home/deploy/advanced_monitor.sh"
    echo "- Backup: /home/deploy/advanced_backup.sh"
}

# Executar funÃ§Ã£o principal
main "$@" 