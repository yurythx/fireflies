#!/bin/bash

# FireFlies - Script de Instala√ß√£o para Ubuntu/Debian
# Instala todos os pr√©-requisitos necess√°rios para o deploy
# Inclui detec√ß√£o autom√°tica de IP e configura√ß√£o de rede

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] INFO: $1${NC}"
}

# Fun√ß√£o para detectar IP da m√°quina
detect_machine_ip() {
    log "üîç Detectando IP da m√°quina..."
    
    local ip_addresses=()
    
    # Tentar diferentes m√©todos de detec√ß√£o de IP
    if command -v ip &> /dev/null; then
        # Usar comando ip (mais moderno)
        local ip_cmd_result=$(ip route get 1.1.1.1 2>/dev/null | grep -oP 'src \K\S+' | head -1)
        if [[ -n "$ip_cmd_result" ]]; then
            ip_addresses+=("$ip_cmd_result")
            log "‚úÖ IP detectado via 'ip route': $ip_cmd_result"
        fi
    fi
    
    if command -v hostname &> /dev/null; then
        # Usar hostname -I
        local hostname_result=$(hostname -I 2>/dev/null | awk '{print $1}')
        if [[ -n "$hostname_result" ]]; then
            ip_addresses+=("$hostname_result")
            log "‚úÖ IP detectado via 'hostname -I': $hostname_result"
        fi
    fi
    
    if command -v ifconfig &> /dev/null; then
        # Usar ifconfig (fallback)
        local ifconfig_result=$(ifconfig 2>/dev/null | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1' | head -1)
        if [[ -n "$ifconfig_result" ]]; then
            ip_addresses+=("$ifconfig_result")
            log "‚úÖ IP detectado via 'ifconfig': $ifconfig_result"
        fi
    fi
    
    # Tentar detectar IP via servi√ßos externos (apenas se necess√°rio)
    if [[ ${#ip_addresses[@]} -eq 0 ]]; then
        warn "‚ö†Ô∏è N√£o foi poss√≠vel detectar IP local, tentando servi√ßos externos..."
        
        # Tentar diferentes servi√ßos
        local external_services=(
            "ifconfig.me"
            "icanhazip.com"
            "ipinfo.io/ip"
            "ipecho.net/plain"
        )
        
        for service in "${external_services[@]}"; do
            if command -v curl &> /dev/null; then
                local external_ip=$(curl -s --max-time 5 "$service" 2>/dev/null | tr -d '\n\r')
                if [[ -n "$external_ip" ]] && [[ "$external_ip" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    ip_addresses+=("$external_ip")
                    log "‚úÖ IP externo detectado via $service: $external_ip"
                    break
                fi
            fi
        done
    fi
    
    # Se ainda n√£o encontrou, usar localhost
    if [[ ${#ip_addresses[@]} -eq 0 ]]; then
        warn "‚ö†Ô∏è N√£o foi poss√≠vel detectar IP, usando localhost"
        ip_addresses+=("127.0.0.1")
    fi
    
    # Retornar o primeiro IP encontrado
    echo "${ip_addresses[0]}"
}

# Fun√ß√£o para detectar hostname da m√°quina
detect_machine_hostname() {
    log "üè∑Ô∏è Detectando hostname da m√°quina..."
    
    local hostname=""
    
    # Tentar diferentes m√©todos
    if command -v hostname &> /dev/null; then
        hostname=$(hostname 2>/dev/null)
    fi
    
    # Se n√£o encontrou, usar um padr√£o
    if [[ -z "$hostname" ]]; then
        hostname="fireflies-server"
        warn "‚ö†Ô∏è Hostname n√£o detectado, usando padr√£o: $hostname"
    fi
    
    echo "$hostname"
}

# Fun√ß√£o para verificar se √© root
check_root() {
    if [[ $EUID -eq 0 ]]; then
        error "‚ùå Este script n√£o deve ser executado como root"
        error "   Execute como usu√°rio normal e use sudo quando necess√°rio"
        exit 1
    fi
}

# Fun√ß√£o para verificar distribui√ß√£o
check_distribution() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        if [[ "$ID" != "ubuntu" && "$ID" != "debian" ]]; then
            warn "‚ö†Ô∏è Este script foi testado em Ubuntu/Debian"
            warn "   Sua distribui√ß√£o: $PRETTY_NAME"
            read -p "Continuar mesmo assim? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
        log "‚úÖ Distribui√ß√£o detectada: $PRETTY_NAME"
    else
        warn "‚ö†Ô∏è N√£o foi poss√≠vel detectar a distribui√ß√£o"
    fi
}

# Fun√ß√£o para atualizar sistema
update_system() {
    log "üîÑ Atualizando sistema..."
    sudo apt update
    sudo apt upgrade -y
    log "‚úÖ Sistema atualizado"
}

# Fun√ß√£o para instalar Python
install_python() {
    log "üêç Instalando Python..."
    
    # Verificar se Python j√° est√° instalado
    if command -v python3 &> /dev/null; then
        PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
        log "‚úÖ Python $PYTHON_VERSION j√° est√° instalado"
        return 0
    fi
    
    # Instalar Python 3.12 ou vers√£o mais recente
    sudo apt install -y python3 python3-pip python3-venv python3-dev
    
    # Verificar instala√ß√£o
    PYTHON_VERSION=$(python3 --version 2>&1 | cut -d' ' -f2)
    log "‚úÖ Python $PYTHON_VERSION instalado"
    
    # Atualizar pip
    python3 -m pip install --upgrade pip
    log "‚úÖ pip atualizado"
}

# Fun√ß√£o para instalar Docker
install_docker() {
    log "üê≥ Instalando Docker..."
    
    # Verificar se Docker j√° est√° instalado
    if command -v docker &> /dev/null; then
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        log "‚úÖ Docker $DOCKER_VERSION j√° est√° instalado"
    else
        # Instalar Docker
        sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
        
        # Adicionar reposit√≥rio oficial do Docker
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
        
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        
        sudo apt update
        sudo apt install -y docker-ce docker-ce-cli containerd.io
        
        # Verificar instala√ß√£o
        DOCKER_VERSION=$(docker --version | cut -d' ' -f3 | cut -d',' -f1)
        log "‚úÖ Docker $DOCKER_VERSION instalado"
    fi
    
    # Adicionar usu√°rio ao grupo docker
    if ! groups $USER | grep -q docker; then
        sudo usermod -aG docker $USER
        log "‚úÖ Usu√°rio adicionado ao grupo docker"
        warn "‚ö†Ô∏è Fa√ßa logout e login novamente para aplicar as mudan√ßas"
    fi
    
    # Iniciar e habilitar Docker
    sudo systemctl start docker
    sudo systemctl enable docker
    log "‚úÖ Docker iniciado e habilitado"
}

# Fun√ß√£o para instalar Docker Compose
install_docker_compose() {
    log "üêô Instalando Docker Compose..."
    
    # Verificar se Docker Compose j√° est√° instalado
    if command -v docker-compose &> /dev/null; then
        COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
        log "‚úÖ Docker Compose $COMPOSE_VERSION j√° est√° instalado"
        return 0
    fi
    
    # Instalar Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    # Verificar instala√ß√£o
    COMPOSE_VERSION=$(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)
    log "‚úÖ Docker Compose $COMPOSE_VERSION instalado"
}

# Fun√ß√£o para instalar ferramentas adicionais
install_tools() {
    log "üîß Instalando ferramentas adicionais..."
    
    # Lista de ferramentas √∫teis
    tools=(
        "lsof"           # Para detec√ß√£o de portas
        "curl"           # Para health checks
        "git"            # Para controle de vers√£o
        "htop"           # Monitor de sistema
        "tree"           # Visualiza√ß√£o de diret√≥rios
        "jq"             # Processamento JSON
        "vim"            # Editor de texto
        "unzip"          # Descompacta√ß√£o
        "wget"           # Download de arquivos
        "net-tools"      # ifconfig, netstat
        "iproute2"       # Comandos ip modernos
    )
    
    for tool in "${tools[@]}"; do
        if ! command -v "$tool" &> /dev/null; then
            sudo apt install -y "$tool"
            log "‚úÖ $tool instalado"
        else
            log "‚ÑπÔ∏è $tool j√° est√° instalado"
        fi
    done
}

# Fun√ß√£o para configurar firewall
configure_firewall() {
    log "üî• Configurando firewall..."
    
    # Detectar IP da m√°quina
    local machine_ip=$(detect_machine_ip)
    local machine_hostname=$(detect_machine_hostname)
    
    log "üåê IP detectado para firewall: $machine_ip"
    log "üè∑Ô∏è Hostname detectado: $machine_hostname"
    
    # Verificar se ufw est√° dispon√≠vel
    if command -v ufw &> /dev/null; then
        # Permitir SSH
        sudo ufw allow ssh
        
        # Permitir portas do Docker
        sudo ufw allow 8000/tcp
        sudo ufw allow 8001/tcp
        sudo ufw allow 5432/tcp
        sudo ufw allow 6379/tcp
        
        # Permitir acesso espec√≠fico ao IP da m√°quina
        sudo ufw allow from $machine_ip to any port 8000
        sudo ufw allow from $machine_ip to any port 8001
        
        # Habilitar firewall
        echo "y" | sudo ufw enable
        
        log "‚úÖ Firewall configurado com regras para:"
        log "   - SSH (porta 22)"
        log "   - Django (portas 8000, 8001)"
        log "   - PostgreSQL (porta 5432)"
        log "   - Redis (porta 6379)"
        log "   - IP espec√≠fico: $machine_ip"
    else
        warn "‚ö†Ô∏è ufw n√£o encontrado, pulando configura√ß√£o de firewall"
        warn "   Instale com: sudo apt install ufw"
    fi
}

# Fun√ß√£o para criar diret√≥rios do projeto
create_project_dirs() {
    log "üìÅ Criando diret√≥rios do projeto..."
    
    # Diret√≥rios necess√°rios
    dirs=(
        "logs"
        "media"
        "staticfiles"
        "backups"
        "temp"
    )
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            log "‚úÖ Diret√≥rio $dir criado"
        else
            log "‚ÑπÔ∏è Diret√≥rio $dir j√° existe"
        fi
    done
}

# Fun√ß√£o para configurar permiss√µes
setup_permissions() {
    log "üîê Configurando permiss√µes..."
    
    # Dar permiss√£o de execu√ß√£o aos scripts
    chmod +x deploy.sh
    chmod +x docker/entrypoint.sh
    chmod +x docker/start.sh
    
    log "‚úÖ Permiss√µes configuradas"
}

# Fun√ß√£o para criar arquivo de configura√ß√£o de rede
create_network_config() {
    log "üåê Criando configura√ß√£o de rede..."
    
    local machine_ip=$(detect_machine_ip)
    local machine_hostname=$(detect_machine_hostname)
    
    # Criar arquivo .env se n√£o existir
    if [[ ! -f .env ]]; then
        cat > .env << EOF
# FireFlies Network Configuration
# Gerado automaticamente pelo install_ubuntu.sh

# Machine Information
MACHINE_IP=$machine_ip
MACHINE_HOSTNAME=$machine_hostname

# Network Configuration
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,$machine_ip,$machine_hostname
CSRF_TRUSTED_ORIGINS=http://localhost:8000,http://127.0.0.1:8000,http://$machine_ip:8000,http://$machine_hostname:8000

# Development Server
DJANGO_HOST=0.0.0.0
DJANGO_PORT=8000

# Docker Configuration
DOCKER_COMPOSE_PROJECT_NAME=fireflies
DOCKER_HOST_IP=$machine_ip

# Production Server (Gunicorn)
GUNICORN_BIND=0.0.0.0:8000
GUNICORN_WORKERS=auto
GUNICORN_WORKER_CLASS=sync
GUNICORN_TIMEOUT=30
GUNICORN_LOG_LEVEL=info
EOF
        log "‚úÖ Arquivo .env criado com configura√ß√µes de rede"
    else
        log "‚ÑπÔ∏è Arquivo .env j√° existe, mantendo configura√ß√µes"
    fi
}

# Fun√ß√£o para verificar instala√ß√£o
verify_installation() {
    log "üîç Verificando instala√ß√£o..."
    
    local all_good=true
    
    # Verificar Python
    if command -v python3 &> /dev/null; then
        log "‚úÖ Python: OK"
    else
        error "‚ùå Python: FALHOU"
        all_good=false
    fi
    
    # Verificar Docker
    if command -v docker &> /dev/null; then
        log "‚úÖ Docker: OK"
    else
        error "‚ùå Docker: FALHOU"
        all_good=false
    fi
    
    # Verificar Docker Compose
    if command -v docker-compose &> /dev/null; then
        log "‚úÖ Docker Compose: OK"
    else
        error "‚ùå Docker Compose: FALHOU"
        all_good=false
    fi
    
    # Verificar lsof
    if command -v lsof &> /dev/null; then
        log "‚úÖ lsof: OK"
    else
        error "‚ùå lsof: FALHOU"
        all_good=false
    fi
    
    # Verificar curl
    if command -v curl &> /dev/null; then
        log "‚úÖ curl: OK"
    else
        error "‚ùå curl: FALHOU"
        all_good=false
    fi
    
    # Verificar IP
    local machine_ip=$(detect_machine_ip)
    if [[ -n "$machine_ip" ]]; then
        log "‚úÖ Detec√ß√£o de IP: OK ($machine_ip)"
    else
        error "‚ùå Detec√ß√£o de IP: FALHOU"
        all_good=false
    fi
    
    if [[ "$all_good" == "true" ]]; then
        log "üéâ Todas as verifica√ß√µes passaram!"
        return 0
    else
        error "‚ùå Algumas verifica√ß√µes falharam"
        return 1
    fi
}

# Fun√ß√£o para mostrar pr√≥ximos passos
show_next_steps() {
    log "üéØ Pr√≥ximos passos:"
    echo ""
    
    # Detectar IP para mostrar informa√ß√µes de acesso
    local machine_ip=$(detect_machine_ip)
    local machine_hostname=$(detect_machine_hostname)
    
    echo "1. üîÑ Fa√ßa logout e login novamente para aplicar as mudan√ßas do Docker"
    echo "2. üöÄ Execute o deploy: ./deploy.sh"
    echo "3. üåê Acesse a aplica√ß√£o:"
    echo "   - Local: http://localhost:8000"
    echo "   - IP Local: http://$machine_ip:8000"
    echo "   - Hostname: http://$machine_hostname:8000"
    echo ""
    echo "üìö Comandos √∫teis:"
    echo "   ./deploy.sh --help          # Ver op√ß√µes"
    echo "   ./deploy.sh --check-only    # Verificar pr√©-requisitos"
    echo "   docker ps                   # Ver containers"
    echo "   docker-compose logs -f      # Ver logs"
    echo ""
    echo "üîß Configura√ß√µes de rede:"
    echo "   IP da m√°quina: $machine_ip"
    echo "   Hostname: $machine_hostname"
    echo "   ALLOWED_HOSTS: localhost,127.0.0.1,0.0.0.0,$machine_ip,$machine_hostname"
    echo ""
    echo "üìñ Documenta√ß√£o:"
    echo "   https://docs.docker.com/"
    echo "   https://docs.djangoproject.com/"
    echo ""
}

# Fun√ß√£o principal
main() {
    log "üéØ Iniciando instala√ß√£o do FireFlies no Ubuntu..."
    
    # Verifica√ß√µes iniciais
    check_root
    check_distribution
    
    # Instala√ß√£o
    update_system
    install_python
    install_docker
    install_docker_compose
    install_tools
    configure_firewall
    create_project_dirs
    setup_permissions
    create_network_config
    
    # Verifica√ß√£o final
    if verify_installation; then
        log "üéâ Instala√ß√£o conclu√≠da com sucesso!"
        show_next_steps
    else
        error "‚ùå Instala√ß√£o falhou"
        exit 1
    fi
}

# Executar fun√ß√£o principal
main "$@" 