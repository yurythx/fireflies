name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Run migrations
        run: |
          python manage.py migrate
      - name: Run tests
        run: |
          python manage.py test
      - name: Run lint
        run: |
          pip install flake8
          flake8 .

  docker-deploy-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create .env file for testing
        run: |
          echo "DEBUG=True" > .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DB_NAME=fireflies_test" >> .env
          echo "DB_USER=fireflies_user" >> .env
          echo "DB_PASSWORD=fireflies_password" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

      - name: Build and start containers
        run: |
          docker-compose up -d --build

      - name: Wait for database to be ready
        run: |
          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' fireflies_db_1 2>/dev/null || echo "starting")
            echo "Database status: $STATUS"
            if [ "$STATUS" = "healthy" ]; then break; fi
            sleep 5
          done

      - name: Wait for web service to be ready
        run: |
          for i in {1..60}; do
            if curl -f http://localhost:8000/health/ 2>/dev/null; then
              echo "Web service is healthy"
              break
            fi
            echo "Waiting for web service... ($i/60)"
            sleep 5
          done

      - name: Healthcheck HTTP
        run: |
          curl -f http://localhost:8000/health/ || (docker-compose logs && exit 1)

      - name: Test setup wizard redirect
        run: |
          # Test if setup wizard redirects properly on first install
          curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/setup/ | grep -E "(200|302)" || (docker-compose logs && exit 1)

      - name: Tear down
        if: always()
        run: docker-compose down -v

  docker-integration-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install requests

      - name: Create .env file for testing
        run: |
          echo "DEBUG=True" > .env
          echo "SECRET_KEY=test-secret-key-for-ci" >> .env
          echo "DB_NAME=fireflies_test" >> .env
          echo "DB_USER=fireflies_user" >> .env
          echo "DB_PASSWORD=fireflies_password" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_PORT=5432" >> .env
          echo "EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend" >> .env
          echo "ALLOWED_HOSTS=localhost,127.0.0.1" >> .env

      - name: Run Docker integration tests
        run: |
          python tests/test_deploy_docker.py

      - name: Cleanup containers
        if: always()
        run: |
          docker-compose down -v || true 